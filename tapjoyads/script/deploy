#!/usr/bin/env ruby

require 'yaml'
require 'optparse'

class Deploy
  
  SERVER_CONFIG_FILENAME = 'server/configuration.yaml'
  
  def initialize(args)
    @options = {
      :environment => 'test',
      :server_groups => 'testserver',
      :fast => false,
      :svn_repo => File.exist?('.svn/')
    }
    
    option_parser = OptionParser.new do |opts|
      opts.on('-e', '--environment [ENVIRONMENT]') do |environment|
        if environment == 'production'
          @options[:environment] = 'production'
          @options[:server_groups] = 'masterjobs jobserver webserver'
        elsif environment != 'test'
          print_usage_and_exit
        end
      end
      
      opts.on('-v', '--version [VERSION]') do |version|
        if version =~ /^(trunk|[0-9]+)$/
          @options[:version] = version
        else
          print_usage_and_exit
        end
      end
      
      opts.on('-f', '--fast') do
        @options[:fast] = true
      end
      
      opts.on_tail('-h', '--help') do
        print_usage_and_exit
      end
    end
    
    unless option_parser.parse!(args).empty?
      puts "Unknown options given."
      print_usage_and_exit
    end
    
    @options[:version] = 'trunk' if @options[:environment] == 'test' && @options[:version].nil?
  end
  
  def deploy
    puts "#{@options[:environment].upcase} deploy"
    update_working_copy
    create_deploy_branch unless @options[:version]
    execute_cloudrun
    puts "Done deploying: #{Time.now}"
  end
  
private
  
  def print_usage_and_exit
    puts "USAGE: script/deploy [options]"
    puts "    -e, --environment (optional): The environment to deploy to. Can be 'test' or 'production'. Default is 'test'."
    puts "    -v, --version (optional): The version to deploy. Defaults to 'trunk' for test deploys and will create a new branch for production deploys."
    puts "    -f, --fast (optional): Specify this option to keep webservers in the load balancer during deploy."
    exit
  end
  
  def prompt_and_exit_if_not_yes
    answer = STDIN.gets
    if answer !~ /^(y|yes)$/i
      exit
    end
  end
  
  def check_syntax
    system("script/runner -e production 'OneOffs.check_syntax'")
    if $?.exitstatus != 0
      puts "Syntax Check: FAILED"
      exit
    end
    puts "Syntax Check: PASSED"
  end
  
  def update_working_copy
    puts "Updating working copy"
    if @options[:svn_repo]
      system("svn update")
    else
      if `git status` !~ /working directory clean/
        puts "You must have a clean working directory!"
        exit
      end
      system("git svn rebase")
    end
  end
  
  def create_deploy_branch
    settings = YAML::load_file(SERVER_CONFIG_FILENAME)
    @options[:version] = (settings['config']["api_deploy_version"].to_i + 1).to_s
    
    print "No deploy branch specified. Create new deploy branch #{@options[:version]}? [y/N] "
    prompt_and_exit_if_not_yes
    
    check_syntax
    
    settings['config']["api_deploy_version"] = @options[:version]
    File.open(SERVER_CONFIG_FILENAME, 'w') do |f|
      f.write(settings.to_yaml)
    end
    
    puts "Creating new deploy branch."
    system("svn copy https://tapjoy.unfuddle.com/svn/tapjoy_tapjoyads/trunk https://tapjoy.unfuddle.com/svn/tapjoy_tapjoyads/deploy/#{@options[:version]} -m 'Creating deploy branch #{@options[:version]}'")
    
    puts "Incrementing version in config file."
    if @options[:svn_repo]
      system("svn commit #{SERVER_CONFIG_FILENAME} -m 'Incrementing config version number to #{@options[:version]}'")
    else
      system("git add #{SERVER_CONFIG_FILENAME}")
      system("git commit -m 'Incrementing config version number to #{@options[:version]}'")
      system("git svn dcommit")
    end
  end
  
  def execute_cloudrun
    command = "script/cloudrun '#{@options[:server_groups]}' 'cd server && svn update && ./deploy.rb #{@options[:version]}' 'webuser'"
    command += " 'remove_from_lb'" unless @options[:fast]
    system(command)
  end
  
end

Deploy.new(ARGV).deploy
