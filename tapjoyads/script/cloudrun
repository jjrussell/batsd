#!/usr/bin/env ruby

require 'lib/ec2_tasks'

unless ARGV[0] && ARGV[1]
  puts "usage: cloudrun <server_group [server_group ...]> <command> [<user>]"
  puts "    server_group(s) (required): aws security group name(s) of the servers to run on"
  puts "    command (required): the command to execute on the servers"
  puts "    user (optional, defaults to 'webuser'): the user to run command as"
  exit
end

server_list = []
ARGV[0].split.each do |server_group|
  server_list += Ec2Tasks.get_dns_names_with_instance_ids(server_group)
end
command = ARGV[1]
user = ARGV[2] || 'webuser'
remove_from_lb = ARGV[3] || false
has_elb_api_tools = File.executable?(`which elb-register-instances-with-lb`.gsub("\n", '')) &&
                    File.executable?(`which elb-deregister-instances-from-lb`.gsub("\n", ''))
if remove_from_lb && !has_elb_api_tools
  puts "You must have the Amazon ELB tools in your PATH!"
  exit
end

# add servers to ~/.ssh/known_hosts to prevent prompts
f = open(File.expand_path('~/.ssh/known_hosts'), 'r')
file_content = ''
f.each do |line|
  file_content += line
end
f = open(File.expand_path('~/.ssh/known_hosts'), 'a')
server_list.each do |server|
  unless file_content.include?(server[:dns_name])
    puts "Adding #{server[:dns_name]} to known_hosts"
    f.puts "#{server[:dns_name]} ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEApZ4yGm+pCsxG/jyPfhn0Qqar0b2oA2eGgC" +
           "GfcR9J1zMhcqoHUh8/2IVpAKsPzPL9UFcpo5dYCFzm2EHwmj6x8ervGIEgoicQ4HlmIGTLEWIo2xTyYdcKw/Bg1lKC9" +
           "ZKBUAr8iyfXJJVs+4LiTUeKfZCtD31u0X+yfYjg5S3AwlWSrCApLJCOGuYHUG9TV0F480GThcZfo5FkQaoR6MnYD6Nk" +
           "pZ0Jmf9f/iXsdLc1oHTcwNoePbsn8zqQ/B1vwgVKYfcKMKYRiIRqOYn06kUJn+pHzqQzpRl2xRHbpFbViIiWt3B8OX9" +
           "+eftdJT5rHUBJs4Y9YBjpT13lnvcj8gs60Q=="
  end
end
f.close

puts "Servers to run on:"
server_list.each do |server|
  server[:remove_from_lb] = remove_from_lb && server[:aws_groups].include?('webserver')
  puts server[:remove_from_lb] ? (server[:dns_name] + ' (will be removed from load balancer)') : server[:dns_name]
end
puts "User: #{user}"
puts "Command: #{command}"

print "Run command? [y/N] "
answer = STDIN.gets
if answer !~ /^(y|yes)$/i
  exit
end

thread_list = []
count = 0
server_list.each do |server|
  count += 1
  thread = Thread.new do
    if server[:remove_from_lb]
      `elb-deregister-instances-from-lb web-lb --instances #{server[:aws_instance_id]}`
    end
    puts "Running on #{server[:aws_groups].to_s.gsub('tapbase', '')} #{server[:dns_name]} (#{count} / #{server_list.length})", `ssh #{user}@#{server[:dns_name]} '#{command}'`, "\n"
    if server[:remove_from_lb]
      `curl -s http://#{server[:dns_name]}:9898/healthz`
      `elb-register-instances-with-lb web-lb --instances #{server[:aws_instance_id]}`
      sleep 1
    end
  end
  server[:remove_from_lb] ? thread.join : thread_list.push(thread)
end
thread_list.each do |thread|
  thread.join
end
