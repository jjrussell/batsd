#!/usr/bin/env ruby

require 'lib/ec2_tasks'
require 'resolv'

unless ARGV[0] && ARGV[1]
  puts "usage: cloudrun <server_group [server_group ...]> <command> [<user>]"
  puts "    server_group(s) (required): aws security group name(s) of the servers to run on"
  puts "    command (required): the command to execute on the servers"
  puts "    user (optional, defaults to 'webuser'): the user to run command as"
  exit
end

server_list = []
server_groups = ARGV[0].split
server_groups.each do |server_group|
  server_list += Ec2Tasks.get_dns_names_with_instance_ids(server_group)
end
command = ARGV[1]
user = ARGV[2] || 'webuser'
serial = (ARGV[3] || false) && server_groups.include?('webserver')
if serial
  elb_interface = Ec2Tasks.get_elb_interface
  registered_webservers = elb_interface.describe_instance_health('api-lb').collect { |instance| instance[:instance_id] }
end

# add servers to ~/.ssh/known_hosts to prevent prompts
f = open(File.expand_path('~/.ssh/known_hosts'), 'r')
file_content = ''
f.each do |line|
  file_content += line.split[0]
end
f = open(File.expand_path('~/.ssh/known_hosts'), 'a')
server_list.each do |server|
  unless file_content.include?(server[:dns_name])
    ip = Resolv.getaddress(server[:dns_name])
    puts "Adding #{server[:dns_name]} to known_hosts"
    f.puts "#{server[:dns_name]},#{ip} ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAvR002E1erByLHXDqGG+2dcDSmkUdRHBPi+WgbD9/jgrbXPTL6+Sk1ThvfE/EfmZ5jheX/Tbqb5cHJK9ezLQdJOkNe6aa6Ki+Av26iVqS4gYeIAS2Jb1ywevg6tL71ls8WbeJotTsXWrWqY1A+7JQSmLwMnoUYer9MRHfWBQbDf4ATs4PLlLIWYkZHEpXBjuy55ILyKGgCdykDa01nRBo+bfLXc2OwMSxkgOY+O8zPHHrfv9hgerAhC4t3QB08LQ46pOhkhr1X8gydMWcWzDFe/t5P0IvKnCEB2F1somIBtxMymsmcmcsfS6mK0LZGgdULjCcbnOrT2IyVKZQuZ9ssw=="
  end
end
f.close

puts "Servers to run on (#{server_list.length} total):"
count = 0
server_list.each do |server|
  count += 1
  server[:server_num] = count
  server[:serial] = serial && server[:aws_groups].include?('webserver') && registered_webservers.include?(server[:aws_instance_id])
  server[:boot_app] = server[:aws_groups].include?('website') || server[:aws_groups].include?('dashboard')
  puts server[:serial] ? "#{server[:dns_name]} (serial)" : "#{server[:dns_name]}"
end
puts "User: #{user}"
puts "Command: #{command}"

print "Run command? [y/N] "
answer = STDIN.gets
if answer !~ /^(y|yes)$/i
  exit
end

thread_list = []
server_list.each do |server|
  thread = Thread.new do
    puts "Running on #{server[:aws_groups].to_s.gsub('tapbase', '')} #{server[:dns_name]} (#{server[:server_num]} / #{server_list.length})", `ssh #{user}@#{server[:dns_name]} 'source /etc/profile ; #{command}'`, "\n"
    if server[:boot_app]
      `curl -s http://#{server[:dns_name]}:9898/healthz`
    end
  end
  server[:serial] ? thread.join : thread_list.push(thread)
end
thread_list.each do |thread|
  thread.join
end
