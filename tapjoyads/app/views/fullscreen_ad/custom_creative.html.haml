#main
  - link_to(get_click_url(@offer), :class => 'image-link') do
    %img{ :src => "#{CLOUDFRONT_URL}/images/blank.png", :class => 'creative', :id => 'creative' }
  .clear
  = link_to('Skip', 'dismiss', :class => 'skip')
  = link_to("#{@offer.item_type == 'App' ? 'Download' : 'Earn now'}", get_click_url(@offer), :class => 'download')

  - content_for :page_javascript do
    :plain
      document.ontouchmove = function(e){ e.preventDefault(); }
      window.onload = init;
      window.onresize = init;

      var availableCreativeSizes = [];
      var availableCreatives = [];

      // Info about creative to be displayed
      var preferredCreative = -1;
      var preferredCreativeOrientation = '';

      function init() {
    - # Provide available custom creative sizes to javascript
    - @offer.banner_creatives.each_with_index do |size,index|
      :plain
        availableCreativeSizes.push("#{size}".split('x'));
        availableCreatives.push("#{@offer.banner_creative_path(size, 'jpeg')}");

    :plain
        // Determine target screen size and orientation
        if(#{@height.present? && @width.present?}) {
          var clientWidth = parseInt('#{@width}');
          var clientHeight = parseInt('#{@height}');
        } else {
          var clientWidth = window.innerWidth;
          var clientHeight = window.innerHeight;
        }
        var clientOrientation = (clientHeight > clientWidth) ? 'portrait' : 'landscape';

        var minHorizMarginPercent = -1;
        var minVertMarginPercent = -1;

        // If a creative hasn't already been selected, scan through all available creatives to determine best screen fit
        if(preferredCreative < 0) {
          for(i = 0; i < availableCreativeSizes.length; i++ ) {
            // Get info about this creative
            var creativeWidth = parseInt(availableCreativeSizes[i][0]);
            var creativeHeight = parseInt(availableCreativeSizes[i][1]);
            var creativeOrientation = (creativeHeight > creativeWidth) ? 'portrait' : 'landscape';
            var horizMargin = clientWidth - creativeWidth;
            var vertMargin = clientHeight - creativeHeight;
            var horizMarginPercent = horizMargin / creativeWidth;
            var vertMarginPercent = vertMargin / creativeHeight;

            // Determine if this creative is a better option than our current 'favorite'
            if(i == 0) {
              // If this is the first creative being considered, set it as the current 'favorite'
              preferredCreative = i;
            } else if(horizMargin == 0 && vertMargin == 0) {
              // If this creative is a perfect fit, use it
              preferredCreative = i;
            } else if(creativeOrientation == clientOrientation && preferredCreativeOrientation != clientOrientation) {
              // If this creative's orientation is a better match than what we have, use it
              preferredCreative = i;
            } else if(creativeOrientation == clientOrientation) {
              // If the creative's orientation matches the client's, calculate how good of a fit this creative is
              // and compare its fit with the current favorite
              if(Math.abs(horizMarginPercent) <= Math.abs(minHorizMarginPercent) &&
                 Math.abs(vertMarginPercent) <= Math.abs(minVertMarginPercent)) {
                preferredCreative = i;
              }
            } else if(preferredCreativeOrientation != clientOrientation) {
              // If we haven't found a creative whose orientation matches the client, find the best
              // fitting creative to show in the 'wrong' orientation
              if((creativeOrientation == 'portrait' && Math.abs(vertMarginPercent) <= Math.abs(minVertMarginPercent)) ||
                 (creativeOrientation == 'landscape' && Math.abs(horizMarginPercent) <= Math.abs(minHorizMarginPercent))) {
                preferredCreative = i;
              }
            }

            // If this creative is our current favorite, save some of its info
            if(preferredCreative == i) {
              preferredCreativeOrientation = creativeOrientation;
              minHorizMarginPercent = horizMarginPercent;
              minVertMarginPercent = vertMarginPercent;

              // If this is a perfect fit, search no more!
              if(horizMargin == 0 && vertMargin == 0)
                break;
            }
          }
        } else {
          // Otherwise, recalculate the margins for the current creative
          var creativeWidth = parseInt(availableCreativeSizes[preferredCreative][0]);
          var creativeHeight = parseInt(availableCreativeSizes[preferredCreative][1]);
          var horizMargin = clientWidth - creativeWidth;
          var vertMargin = clientHeight - creativeHeight;
          minHorizMarginPercent = horizMargin / creativeWidth;
          minVertMarginPercent = vertMargin / creativeHeight;
        }

        alert("Screen size: " + clientWidth + "x" + clientHeight + " (" + clientOrientation + ")\n" +
              "");

        // If we've found creative to use, then tweak the styling and download the image
        if(preferredCreative >= 0) {
          var baseCreativeUrl = "#{CLOUDFRONT_URL}";
          var creative = document.getElementById('creative');
          var main = document.getElementById('main');

          // Calculate which dimension can be maximized without the image being cropped
          var adjustPercent = Math.min(minHorizMarginPercent, minVertMarginPercent);

          // Calculate adjusted image dimensions
          var newWidth = parseInt(availableCreativeSizes[preferredCreative][0]) + Math.round(adjustPercent * parseInt(availableCreativeSizes[preferredCreative][0]));
          var newHeight = parseInt(availableCreativeSizes[preferredCreative][1]) + Math.round(adjustPercent * parseInt(availableCreativeSizes[preferredCreative][1]));

          // Calculate margins for main div
          var horizMargin = 0;
          var vertMargin = 0;
          if(clientWidth != newWidth) {
            horizMargin = Math.round((clientWidth - newWidth) / 2);
          }
          if(clientHeight != newHeight) {
            vertMargin = Math.round((clientHeight - newHeight) / 2);
          }

          // Apply size constraints to image tag in markup
          creative.setAttribute('style', 'width: ' + newWidth + 'px; height: ' + newHeight + 'px;');
          main.setAttribute('style', 'height: ' + newHeight + 'px; ' +
                                     'margin: ' + vertMargin + 'px ' + horizMargin + 'px;');

         // Set the image url if this is the initial drawing
         creative.src = baseCreativeUrl + "/" + availableCreatives[preferredCreative];
        }
      }

  - content_for :page_styles do
    :plain
      body {
        margin: 0;
        height: #{@height}px;
        background-color: #000;
      }

      #main {
        font-size: 40px;
        text-align: center;
        position: relative;
        margin: auto;
        height: #{@height}px;
        width: #{@width}px;
      }

      .image-link {
        text-decoration: none;
        display: inline-block;
      }

      img.creative {
        display: block;
        margin: 0 auto;
        height: #{@height}px;
        width: #{@width}px;
        background-image: url('/images/spinner.gif');
        background-repeat: no-repeat;
        background-position: center;
      }

      .skip,
      .download {
        border: 1px solid #aaa;
        -moz-border-radius: 14px;
        -webkit-border-radius: 14px;
        text-decoration: none;
      }

      .skip {
        padding: 10px;
        margin-right: 40px;
        color: #555;
        background-color: #ccc;
      }

      .download {
        background: url("/images/arrow-right.png") no-repeat scroll 98% 50% #eee;
        color: #004E09;
        display; block;
        padding: 10px 100px 10px 80px;
        font-weight: bold;
      }
