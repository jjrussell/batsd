- @page_title = 'Validations Report'

%h1 Validations Report
- form_tag(tools_partner_validations_path, :method => :get, :class => 'tjform') do
  = label_tag(:q, 'Account Manager:')
  = text_field_tag(:q, params[:q], :size => '40')
  = submit_tag('Search')

%table
  %thead
    %tr
      %th Partner
      %th Partner Email
      %th{:class => "sort #{params[:acct_mgr_sort] if params[:acct_mgr_sort]}"} Account Manager&nbsp;&nbsp;&nbsp;&nbsp;
      %th Bank Info Present?
      %th Notes
      %th Confirm
  %tbody
    - @partners.each do |partner|
      - payout_info = partner.payout_info
      - confirmation_notes = partner.confirmation_notes
      - confirmation_notes << 'Payout Info not Present!' unless payout_info.present?
      %tr
        %td
          %strong Name:
          - if payout_info.present?
            = payout_info.company_name
          - else
            \-
          %br/
          %strong Partner Name:
          = partner.name
          - if payout_info.present? && payout_info.doing_business_as.present?
            %br/
            %strong d/b/a:
            = payout_info.doing_business_as
          %br/
          %strong ID:
          = link_to(partner.id, partner_path(partner.id))
        %td
          = mail_to(partner.non_managers.first.email) if partner.non_managers.present?
        %td
          = partner.account_managers.join('<br>')
        - if payout_info.present? && payout_info.valid?
          %td
            %span.present
              %strong Present
            %br/
        - else
          %td
            %span.not_present
              %strong Not Present

        %td
          - if permitted_to?(:confirm_payouts, :tools_partner_validations)
            - form_tag confirm_payouts_tools_partner_validations_path( :partner_id => partner.id, :type => :json), :method => :post, :class => 'enable_request' do
              %div{ :class => 'enabled', :style =>  (!confirmation_notes.empty? ? 'display:none;' : 'display:inline;')}
                %span{ :class => 'enabled'}
                  %strong Confirmed
              %div{ :class => 'disabled', :style => (confirmation_notes.empty? ? 'display:none;' : 'display:inline;') }
                %span{ :class => 'disabled'}
                  %strong Unconfirmed
                  = submit_tag 'Confirm', :class => 'submit'
              %img.spinner{ :src => '/images/spinner.gif', :style => 'display:none;' }
          - else
            - if partner.confirmed_for_payout
              %span{ :class => 'enabled'} Confirmed
            - else
              %span{ :class => 'disabled'}
                Uncomfirmed
        %td.notes
          %span{ :class => 'disabled' }
            - unless confirmation_notes.empty?
              \- #{confirmation_notes.join('<br>-')}

= will_paginate(@partners)
- content_for :page_javascript do
  :plain
    $(function($) {
      $('th.sort').click(function() {

        var location = '#{tools_partner_validations_path}?#{('page='+params[:page]+'&') if params[:page].present?}';
        if($(this).hasClass('DESC')) {
          $(this).removeClass('DESC');
          $(this).addClass('ASC');
          location += 'acct_mgr_sort=ASC';
        } else {
          $(this).removeClass('ASC');
          $(this).addClass('DESC');
          location += 'acct_mgr_sort=DESC';
        }
        window.location = location;
      });

      if (#{@start_date.blank?}) {
        $('#unfiltered').show();
      } else {
        $('#filtered').show();
      }
      $('#unfiltered a').click(function(){
        $('#unfiltered').hide();
        $('#filtered').show();
        return false;
      });
      $('form.enable_request').submit(function() {
        if (!confirm('Are you sure?')) { return false; }

        var spinner = $(this).find('img.spinner');
        var disabled = $(this).find('div.disabled');
        var enabled = $(this).find('div.enabled');
        var notes = $(this).parent().parent().find('td.notes');

        $.ajax({
          dataType: 'json',
          type: $(this).attr('method'),
          url: $(this).attr('action'),
          data: $(this).serialize(),
          beforeSend: function() {
            disabled.hide();
            enabled.hide();
            spinner.show();
          },
          complete: function() {
            spinner.hide();
          },
          success: function(response) {
            if (response.success == true) {
              if(response.was_confirmed == true) {
                enabled.show();
                notes.empty();
              } else {
                disabled.show();
              }
            } else {
              $(this).parent().html('Error');
            }
          }
        });
        return false;
      });
    });
- content_for :page_styles do
  :plain
    #main {
      width: 1200px;
    }
    table {
      border-collapse: collapse;
    }
    th, td {
      border: 1px solid gray;
      padding: 5px;
      font-size: 12px;
    }

    span.enabled, span.present {
      color: green;
    }

    span.disabled, span.not_present {
      color: red;
    }

    h3 a {
      text-decoration: none;
      font-size: 14px;
    }

    th.sort {
      background-position: 100% 50%;
      background-repeat: no-repeat;
      background-image: url(/stylesheets/themes/blue/bg.gif);
    }
    th.ASC {
      background-position: 100% 50%;
      background-repeat: no-repeat;
      background-image: url(/stylesheets/themes/blue/asc.gif);
    }
    th.DESC {
      background-position: 100% 50%;
      background-repeat: no-repeat;
      background-image: url(/stylesheets/themes/blue/desc.gif);
    }
