- @page_title = "Reporting for #{@offer.name}"

%ul
  - current_partner_offers.each do |offer|
    - unless @offer.id == offer.id
      %li= link_to(offer.name, reporting_path(offer.id, { :date => @start_time.to_date.to_s(:mdy), :end_date => @end_time.to_date.to_s(:mdy), :granularity => @granularity }))

#display_date
  For: #{@start_time.to_s(:mdy)} - #{@end_time.to_s(:mdy)}. 
  Granularity: #{@granularity.to_s}.
  %a{ :href => '#' } [Change]

%form#change_date{ :method => 'get' }
  = text_field_tag(:date, @start_time.to_date.to_s(:mdy))
  \-
  = text_field_tag(:end_date, @end_time.to_date.to_s(:mdy))
  = select_tag(:granularity, options_for_select({ 'Daily' => :daily, 'Hourly' => :hourly }, @granularity))
  = submit_tag('Change')

#charts
  #connects.graph
    %h3
    .holder
      %canvas#connects_graph{:width => '550px', :height => '330px'}
      .bar
      .tooltip

  #installs_spend.graph
    %h3
    .holder
      %canvas#installs_spend_graph{:width => '550px', :height => '330px'}
      .bar
      .tooltip

  #installs_rank.graph
    %h3
    .holder
      %canvas#installs_rank_graph{:width => '550px', :height => '330px'}
      .bar
      .tooltip

  #published_offers.graph
    %h3
    .holder
      %canvas#published_offers_graph{:width => '550px', :height => '330px'}
      .bar
      .tooltip

  #offerwall_views.graph
    %h3
    .holder
      %canvas#offerwall_views_graph{:width => '550px', :height => '330px'}
      .bar
      .tooltip

.clear

#tables
  .data
    %table
      %thead
        %tr
          %th{ :colspan => 2 } Advertiser Data
      %tbody
        %tr
          %td Clicks
          %td= number_with_delimiter(@stats['paid_clicks'].sum)
        %tr
          %td Installs
          %td= number_with_delimiter(@stats['paid_installs'].sum)
        %tr
          %td Conversion Rate
          %td
            - if @stats['paid_clicks'].sum > 0
              = "%.1f%" % (@stats['paid_installs'].sum.to_f / @stats['paid_clicks'].sum * 100.0)
            - else
              \-
        %tr
          %td Spend
          %td= number_to_currency(@stats['installs_spend'].sum / -100.0)
        %tr
          %td Daily Budget
          %td= number_with_delimiter(@offer.daily_budget)
        %tr
          %td Balance
          %td= number_to_currency(current_partner.balance / 100.0)
        %tr
          %td Cost per Install
          %td= number_to_currency(@offer.payment / 100.0)

  .data
    %table
      %thead
        %tr
          %th{ :colspan => 2 } Publisher Data
      %tbody
        %tr
          %td Offerwall Views
          %td= number_with_delimiter(@stats['offerwall_views'].sum)
        %tr
          %td Offer Clicks
          %td= number_with_delimiter(@stats['rewards_opened'].sum)
        %tr
          %td Offers Completed
          %td= number_with_delimiter(@stats['rewards'].sum)
        %tr
          %td Conversion Rate
          %td
            - if @stats['rewards_opened'].sum > 0
              = "%.1f%" % (@stats['rewards'].sum.to_f / @stats['rewards_opened'].sum * 100.0)
            - else
              \-
        %tr
          %td Revenue
          %td= number_to_currency(@stats['rewards_revenue'].sum / 100.0)
        %tr
          %td Offerwall eCPM
          %td
            - if @stats['offerwall_views'].sum > 0
              = number_to_currency(@stats['rewards_revenue'].sum.to_f / (@stats['offerwall_views'].sum / 1000.0) / 100.0)
            - else
              $0.00

  .data
    - form_tag(export_reporting_path(@offer.id)) do
      = hidden_field_tag(:date, @start_time.to_date.to_s(:mdy))
      = hidden_field_tag(:end_date, @end_time.to_date.to_s(:mdy))
      = hidden_field_tag(:granularity, @granularity)
      = submit_tag('Download as CSV')

  .clear

- include_tapjoy_graph

- content_for :page_javascript do
  :plain
    var connectData = {
      "name": "Connects",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data": [
           [ #{@stats['logins'].join(',')} ],
           [ #{@stats['new_users'].join(',')} ],
           [ #{@stats['daily_active_users'].join(',')} ],
           [ #{@stats['monthly_active_users'].join(',')} ],
        ],
        "names": [ "Connects", "New users", "DAUs", "MAUs" ]
      }
    };
    
    var installData = {
      "name": "Rewarded installs + spend",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data": [
           [ #{@stats['paid_installs'].join(',')} ],
           [ #{@stats['paid_clicks'].join(',')} ]
        ],
        "names": [ "Paid installs", "Paid clicks" ]
      },
      
      "right": {
        "data": [
          [ #{@stats['installs_spend'].map { |i| i / -100.0 }.join(',')} ]
        ],
        "stringData": [
          [ "#{@stats['installs_spend'].map { |i| number_to_currency(i / -100.0) }.join('","')}" ]
        ],
        "names": [ "Spend" ],
        "unitPrefix": "$"
      },
      
      "extra": {
        "data": [
          [ "#{@stats['cvr'].map { |cvr| "%.0f%" % (cvr.to_f * 100.0) }.join('","')}" ]
        ],
        "names": [ "Conversion rate" ]
      }
    };
    
    var rankData = {
      "name": "Rewarded installs + rank",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data": [
           [ #{@stats['paid_installs'].join(',')} ],
           [ #{@stats['paid_clicks'].join(',')} ]
        ],
        "names": [ "Paid installs", "Paid clicks" ]
      },
      
      "right": {
        "data": [
          [ #{ @stats['overall_store_rank'].map{|r| r == '-' || r == '0'  ? 'null' : r}.join(',') } ]
        ],
        "names": [ "Rank" ],
        "yMax": 100
      }
    };
    
    var publishedOffersData = {
      "name": "Published offers",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data": [
           [ #{@stats['rewards'].join(',')} ],
           [ #{@stats['rewards_opened'].join(',')} ]
        ],
        "names": [ "Offers completed", "Offer clicks" ]
      },
      
      "right": {
        "data": [
          [ #{@stats['rewards_revenue'].map { |i| i / 100.0 }.join(',')} ]
        ],
        "stringData": [
          [ "#{@stats['rewards_revenue'].map { |i| number_to_currency(i / 100.0) }.join('","')}" ]
        ],
        "names": [ "Revenue" ],
        "unitPrefix": "$"
      }
    };
    
    var offerwallData = {
      "name": "Offerwall views",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data": [
           [ #{@stats['offerwall_views'].join(',')} ]
        ],
        "names": [ "Offerwall views" ]
      },
      
      "right": {
        "data": [
          [ #{@stats['rewards_revenue'].map { |i| i / 100.0 }.join(',')} ],
          [ #{@stats['offerwall_ecpm'].map { |i| i / 100.0 }.join(',')} ]
        ],
        "stringData": [
          [ "#{@stats['rewards_revenue'].map { |i| number_to_currency(i / 100.0) }.join('","')}" ],
          [ "#{@stats['offerwall_ecpm'].map { |i| number_to_currency(i / 100.0) }.join('","')}" ]
        ],
        "names": [ "Revenue", "Offerwall eCPM" ],
        "unitPrefix": "$"
      }
    };
    
    $(function() {
      $('#display_date a').click(function() {
        $('#display_date').hide();
        $('#change_date').show();
        return false;
      });
      
      $('#date').datepicker();
      $('#end_date').datepicker();
      
      Tapjoy.drawLargeGraph(connectData, 'connects');
      Tapjoy.drawLargeGraph(installData, 'installs_spend');
      Tapjoy.drawLargeGraph(rankData, 'installs_rank');
      Tapjoy.drawLargeGraph(publishedOffersData, 'published_offers');
      Tapjoy.drawLargeGraph(offerwallData, 'offerwall_views');
    });
  
- content_for :page_styles do
  :plain
    .clear {
      clear: both;
    }
    
    #change_date {
      display: none;
    }
    
    #charts {
      padding: 10px 0;
    }
    
    .data {
      float: left;
      padding: 0 10px;
    }
    
    table {
      border-collapse: collapse;
    }
    
    th, td {
      border: 1px solid #ccc;
      padding: 2px 5px;
    }
    
    th {
      text-align: center;
    }
    
    td {
      text-align: left;
    }
