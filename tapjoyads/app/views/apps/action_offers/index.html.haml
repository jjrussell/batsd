- @page_title = 'Pay-Per-Action'

%h3 Actions

%p
  Integrate your actions into your app using the ActionIDs listed below. You can edit any action by selecting the action, or create new actions by clicking on the Create New Action button. 
%p
  Once you've integrated the code, contact
  = mail_to "support@tapjoy.com"
  to test the integration and enable your action for Pay-Per-Action. Each action needs to be individually tested and enabled by Tapjoy.
%p
  To help you integrate these actions, you can include the following file in your project and use the constants defined within instead of the ActionIDs.
  
.code
  .code-header
    = @app.default_actions_file_name
    = " · "
    = link_to("Show file contents", '', :class => 'show_file_contents')
    = " · "
    = link_to_generated_actions_header(@app, "Download this file")
  .code-content.hidden
    %pre><= @app.generate_actions_file
%br

%div= button_to "Create New Action", new_app_action_offer_path(@app), :method => :get
%br

%table.actions{ :width => '100%' }
  %thead
    %tr
      %th Enabled?
      %th Action
      %th Bid
      %th ActionID
      %th Integrated?
      %th Approved?
  %tbody
    - @action_offers.each do |action_offer|
      %tr{ :class => cycle('even', 'odd') }
        %td
          - form_tag toggle_app_action_offer_url(@app, action_offer) do
            = check_box_tag("", "1", action_offer.user_enabled?, :class => 'toggle_action_offer')
          %img{ :src => '/images/load-circle.gif', :style => 'display: none;' }
        %td= link_to(action_offer.name, edit_app_action_offer_path(@app, action_offer))
        %td= number_to_currency 0.01 * action_offer.bid
        %td= action_offer.id
        %td{ :class => action_offer.integrated? ? "integrated" : "not_integrated" }= action_offer.integrated? ? "Yes" : "No"
        %td{ :class => action_offer.tapjoy_enabled? ? "integrated" : "not_integrated" }= action_offer.tapjoy_enabled? ? "Yes" : "No"

- content_for :page_javascript do
  :plain
    $(function($){
      $('.toggle_action_offer').click(function(){
        var checkBox = $(this);
        var form = checkBox.closest('form');
        var spinner = form.next();
        var postUrl = form.attr('action');
      
        $.ajax({
          type: "POST",
          url:  postUrl,
          data: form.serialize(),
          beforeSend: function() {
            form.hide();
            spinner.show();
          },
          success: function(result) {
            if (result.success) {
              checkBox.attr('checked', result.user_enabled);
            }
            else {
              alert('Error toggling action');
            }
            spinner.hide();
            form.show();
          },
          error: function() {
            alert('Error toggling action');
            spinner.hide();
            form.show();
          }
        });

        return false;
      });
    
      $('.show_file_contents').click(function(){
        var link = $(this);
        var code = $('.code-content');
      
        if (code.is(':visible')){
          code.hide();
          link.text('Show file contents');
        }
        else{
          code.show();
          link.text('Hide file contents');
        }
      
        return false;
      });
    });
  
- content_for :page_styles do
  :plain
    table.actions tbody td {
      text-align: center;
      padding-top: 6px;
      padding-bottom: 6px;
    }
  
    table.actions tbody {
      font-size: 13px;
    }
  
    table.actions tbody tr.even {
      background-color: #f0f0f6;
    }
  
    .code-content {
      padding: 0 16px;
      border: 1px solid #ccc;
      background-color: #f0f0f6;
      overflow: auto;
    }