- @page_title = "Edit offer: #{@offer.name_with_suffix}"
- content_for :page_head, stylesheet_link_tag('facebox')

.icon= image_tag(@offer.get_icon_url, :size => '57x57')

%h1= @offer.name_with_suffix

.clear

= form_for(:offer, @offer, :url => { :action => :update }, :html => { :method => :put, :class => 'tjform' }) do |f|
  %table
    %tr
      %th
        = f.label(:tapjoy_enabled)
        #help_tapjoy_enabled.help ?
      %td
        = f.check_box(:tapjoy_enabled)
        = error_message_on @offer, :tapjoy_enabled
    %tr
      %th
        = f.label(:user_enabled)
        #help_user_enabled.help ?
      %td
        = f.check_box(:user_enabled)
        = error_message_on @offer, :user_enabled
    %tr
      %th
        = f.label(:self_promote_only)
        #help_self_promote_only.help ?
      %td
        = f.check_box(:self_promote_only)
        = error_message_on @offer, :self_promote_only
    - if @offer.item_type == 'App'
      %tr
        %th
          = f.label(:min_os_version, "Minimum OS Version")
          #help_min_os_version.help ?
        %td
          = f.select(:min_os_version, @offer.item.os_versions, :include_blank => 'No Minimum')
          = error_message_on(@offer, :min_os_version)
    %tr
      %th
        = f.label(:allow_negative_balance)
        #help_allow_negative_balance.help ?
      %td
        = f.check_box(:allow_negative_balance)
        = error_message_on @offer, :allow_negative_balance
    %tr
      %th
        = f.label(:pay_per_click)
        #help_pay_per_click.help ?
      %td
        = f.check_box(:pay_per_click)
        = error_message_on @offer, :pay_per_click
    %tr
      %th
        = f.label(:featured)
        #help_featured.help ?
      %td
        = f.check_box(:featured)
        = error_message_on @offer, :featured
    %tr
      %th
        = f.label(:cookie_tracking)
        #help_cookie_tracking.help ?
      %td
        = f.check_box(:cookie_tracking)
        = error_message_on @offer, :cookie_tracking
    - if @offer.is_free?
      %tr
        %th
          = f.label(:rewarded)
          #help_rewarded.help ?
        %td
          = f.check_box(:rewarded)
          = error_message_on @offer, :rewarded
    - if @offer.multi_completable?
      %tr
        %th
          = f.label(:multi_complete, 'Multi-complete')
          #help_multi_complete.help ?
        %td
          = f.check_box(:multi_complete)
          = error_message_on @offer, :multi_complete
      %tr
        %th
          = f.label(:interval)
          #help_interval.help ?
        %td
          = f.select(:interval, options_for_select(Offer::FREQUENCIES_CAPPING_INTERVAL, @offer.interval), { :include_blank => false })
          = error_message_on @offer, :interval
    %tr
      %th
        = f.label(:tapjoy_sponsored, 'Tapjoy Sponsored')
        #help_tapjoy_sponsored.help ?
      %td
        = f.check_box(:tapjoy_sponsored)
        = error_message_on @offer, :tapjoy_sponsored
    - if @offer.item_type == 'App'
      %tr
        %th
          = f.label(:sdkless, 'SDK-less enabled')
          #help_sdkless.help ?
        %td
          = f.check_box(:sdkless)
          = error_message_on @offer, :sdkless
    - if @offer.item_type == 'GenericOffer'
      %tr
        %th
          = f.label(:direct_pay, 'Direct-pay')
          #help_direct_pay.help ?
        %td
          = f.select(:direct_pay, options_for_select(Offer::DIRECT_PAY_PROVIDERS, @offer.direct_pay), { :include_blank => true })
          = error_message_on @offer, :direct_pay
    %tr
      %th
        = f.label(:name, 'Name')
        #help_name.help ?
      %td
        = f.text_field(:name)
        = error_message_on @offer, :name
    %tr
      %th
        = f.label(:name_suffix, 'Internal Suffix')
        #help_internal_suffix.help ?
      %td
        = f.text_field(:name_suffix)
        = error_message_on @offer, :name_suffix
    %tr
      %th
        = f.label(:account_manager_notes, 'Internal Notes')
        #help_account_manager_notes.help ?
      %td
        = f.text_area(:account_manager_notes)
        = error_message_on @offer, :account_manager_notes
    - if @offer.item_type == 'App'
      %tr
        %th
          = f.label :name, 'Prerequisite'
          #help_prerequisite.help ?
        %td
          - offer_options = options_for_prerequisites(@offer)
          - prerequisites_options = offer_options
          - prerequisites_options = [ [ "None", "" ] ] + offer_options if ((permitted_to?(:edit, :dashboard_statz) || prerequisite_offer_id.blank?))
          = f.select :prerequisite_offer_id, prerequisites_options
          = error_message_on @offer, :prerequisite_offer_id
      %tr
        %th
          = f.label :name, 'Exclusion Prerequisites'
          #help_exclusion_prerequisites.help ?
        %td
          = f.hidden_field(:hidden_exclusion_prerequisite_offer_ids, :value => '', :name => 'offer[exclusion_prerequisite_offer_ids][]')
          = f.chosen_select(:exclusion_prerequisite_offer_ids, options_for_select(offer_options, @offer.get_exclusion_prerequisite_offer_ids.to_a), {}, :multiple => true)
          = error_message_on @offer, :exclusion_prerequisite_offer_ids
    %tr
      %th
        = f.label(:show_rate)
        #help_show_rate.help ?
      %td
        = f.text_field(:show_rate)
        = error_message_on @offer, :show_rate
    %tr
      %th
        = f.label(:min_conversion_rate, 'Min CVR')
        #help_min_conversion_rate.help ?
      %td
        = f.text_field(:min_conversion_rate)
        = error_message_on @offer, :min_conversion_rate
    = render('dashboard/apps/offers_shared/countries', :f => f)
    %tr
      %th
        = f.label(:regions)
        #help_regions.help ?
      %td
        = f.text_field(:regions)
        = error_message_on @offer, :regions
        .details= link_to('State Code List', 'http://en.wikipedia.org/wiki/List_of_U.S._state_abbreviations', :target => '_blank')
        .details= link_to('Province Code List', 'http://en.wikipedia.org/wiki/Canadian_subnational_postal_abbreviations', :target => '_blank')
    %tr
      %th
        = f.label(:dma_codes)
        #help_dma_codes.help ?
      %td
        = f.text_field(:dma_codes)
        = error_message_on @offer, :dma_codes
        .details= link_to('DMA Code List', 'http://code.google.com/apis/adwords/docs/appendix/metrocodes.html', :target => '_blank')
    %tr
      %th
        = f.label(:cities)
        #help_cities.help ?
      %td
        = f.text_field(:cities)
        = error_message_on @offer, :cities
    = render('dashboard/apps/offers_shared/carriers', :f => f)
    %tr
      %th
        = f.label(:device_types)
        #help_device_types.help ?
      %td
        = f.chosen_select(:device_types, options_for_select(Offer::ALL_DEVICES, @offer.get_device_types.to_a), {}, :multiple => true)
        = error_message_on @offer, :device_types
    %tr
      %th
        = f.label(:approved_sources)
        #help_approved_sources.help ?
      %td
        = f.chosen_select(:approved_sources, options_for_select(Offer::ALL_SOURCES, @offer.get_approved_sources.to_a), {}, :multiple => true)
        = error_message_on @offer, :approved_sources
    %tr
      %th
        = f.label(:publisher_app_whitelist)
        #help_publisher_app_whitelist.help ?
      %td
        = f.text_field(:publisher_app_whitelist)
        = error_message_on @offer, :publisher_app_whitelist
    - if [ 'App', 'EmailOffer', 'GenericOffer', 'ActionOffer', 'VideoOffer' ].include?(@offer.item_type)
      %tr
        %th
          = f.label(:bid)
          #help_bid.help ?
        %td
          = f.currency_field(:bid)
          = error_message_on @offer, :bid
      %tr
        %th
          = f.label(:min_bid_override)
          #help_min_bid_override.help ?
        %td
          = f.currency_field(:min_bid_override, {}, :class => 'allow_nil')
          = error_message_on @offer, :min_bid_override
      %tr
        %th
          = f.label(:daily_budget, 'Daily Conversions')
          #help_daily_budget.help ?
        %td
          = f.text_field(:daily_budget)
          = error_message_on @offer, :daily_budget
      %tr
        %th
          = label_tag('estimated_budget', 'Daily Budget')
          #help_estimated_budget.help ?
        %td
          = text_field_tag('estimated_budget', '', :size => 30)
      %tr
        %th
          = f.label(:overall_budget, 'Overall Conversions')
          #help_overall_budget.help ?
        %td
          = f.text_field(:overall_budget)
          = error_message_on @offer, :overall_budget
    - if @offer.video_offer?
      %tr
        %th
          = f.label(:age_rating)
          #help_age_rating.help ?
        %td
          = f.text_field(:age_rating)
          = error_message_on @offer, :age_rating
      %tr
        %th= f.label(:third_party_data)
        %td= f.text_area(:third_party_data)
    - if @offer.app_offer? || @offer.item_type == 'GenericOffer'
      %tr
        %th
          = f.label(:url_overridden, 'Override Default Destination URL')
          #help_url_overridden.help ?
        %td= f.check_box(:url_overridden)
      %tr
        %th
          = f.label(:url, 'Destination URL')
          #help_url.help ?
        %td
          %span{:id => 'url_container', :class => (@offer.url_overridden? ? '' : 'hidden')}
            = f.text_field(:url)
            = error_message_on @offer, :url
          %span{:id => 'default_url', :class => (@offer.url_overridden? ? 'hidden' : '')}
            - if @offer.item_type == 'App'
              = h(@offer.item.store_url)
            - elsif @offer.item_type == 'GenericOffer'
              = h(@offer.item.url)

    - if @offer.item_type == 'App' && @offer.item.screen_layout_sizes.any?
      %tr
        %th
          = f.label(:screen_layout_sizes)
          #help_screen_layout_sizes.help ?
        %td
          = f.chosen_select(:screen_layout_sizes, options_for_select(@offer.item.screen_layout_sizes, @offer.get_screen_layout_sizes.to_a), {}, :multiple => true)
          = error_message_on @offer, :screen_layout_sizes
    - if @offer.item_type == 'ActionOffer' || @offer.item_type == 'GenericOffer'
      %tr
        %th
          = f.label(:instructions_overridden, 'Override Default Instructions')
          #help_instructions_overridden.help ?
        %td
          = f.check_box(:instructions_overridden)
          = error_message_on @offer, :instructions_overridden
      %tr{:id => 'instructions_container', :class => (@offer.instructions_overridden? ? '' : 'hidden')}
        %th
          = f.label(:instructions, 'Instructions')
          #help_instructions.help ?
        %td
          = f.text_area(:instructions)
          = error_message_on @offer, :instructions
    - if @offer.tracking_for
      %tr
        %th
          = f.label(:tracking_for_type, 'Tracking For')
          #help_tracking_for_type.help ?
        %td
          = f.text_field(:tracking_for_type, :disabled => true)
          = error_message_on @offer, :tracking_for_type
      %tr
        %th
          = f.label(:tracking_for_id)
          #help_tracking_for_id.help ?
        %td
          - if @offer.tracking_for_type == 'FeaturedContent'
            = link_to(@offer.tracking_for_id, edit_tools_featured_content_path(@offer.tracking_for_id))
          - else
            = f.label(@offer.tracking_for_id)
          = error_message_on @offer, :tracking_for_id

    / tracking pixel urls
    %tr
      %th &nbsp;
      %td &nbsp;
    %tr
      %th Tracking Pixel URLs
      %td
        %i
          Tracking Pixel URLs will be called server-side at request time. See individual help content for more info.
          %br= h("Automatically replaced macros: #{Offer.tracking_macros}")
          / Trusted tracking vendors are: #{h(Offer.trusted_third_party_tracking_vendors)}
    - %w(impression click conversion).each do |tracking_type|
      %tr{ :id => "#{tracking_type}_tracking_urls_row" }
        %th
          - type = tracking_type.capitalize
          - type << '*' if tracking_type == 'click'
          = f.label(:"#{tracking_type}_tracking_urls", "#{type} Tracking Pixel URLs")
          .help{ :id => "help_#{tracking_type}_tracking_urls" } ?
        %td
          = error_message_on @offer, :"#{tracking_type}_tracking_urls"
          - if tracking_type == 'click'
            = h('*Note: "Click" can mean a variety of things. See help content for more info.')
            %br
          = link_to('Add URL', '', :class => "add_#{tracking_type}_tracking_url", :onclick => 'return false;')
      %tr{ :id => "#{tracking_type}_tracking_url_template", :class => 'hidden' }
        %th
        %td
          = text_field_tag("offer[#{tracking_type}_tracking_urls][]", '', :size => 58)
          = link_to('(remove)', '', :class => "remove_#{tracking_type}_tracking_url", :onclick => 'return false;')
    %tr
      %th &nbsp;
      %td &nbsp;
    / /tracking pixel urls

    %tr
      %td{ :colspan => 2 }= f.submit('Save Changes')
    %tr
      %td{ :colspan => 2}
        = render('dashboard/offer_creatives/iframes', :offer => @offer)

.hidden
  #help_tapjoy_enabled_content{ :name => 'Tapjoy Enabled' } Whether or not the offer is enabled for installs by Tapjoy.
  #help_user_enabled_content{ :name => 'User Enabled' } Whether or not the offer is enabled for installs by the user.
  #help_self_promote_only_content{ :name => 'Self Promote Only' } Only show this offer on offerwalls from the same partner.
  #help_allow_negative_balance_content{ :name => 'Allow Negative Balance' } Allow this partner's balance to go below zero. This effectively locks show rate to 1.0.
  #help_pay_per_click_content{ :name => 'Pay-Per-Click' } Charge the advertiser and award the user immediately on click.
  #help_multi_complete_content{ :name => 'Multi-complete' } Allow this offer to be completed multiple times per device.
  #help_tapjoy_sponsored_content{ :name => 'Tapjoy sponsored' } Whether or not the offer is Tapjoy sponsored.
  #help_sdkless_content{ :name => 'SDK-less enabled' } Enabling SDK-less capability allows advertisers to bypass integrating the Tapjoy Advertiser SDK into their apps. App installations will be tracked by publisher apps when users engage with the advertiser's offer.  SDK-less offers will only be displayed in publisher apps using SDK version #{SDKLESS_MIN_LIBRARY_VERSION} or later.
  #help_direct_pay_content{ :name => 'Direct-pay' } Select a direct-pay provider from the list to designate this offer as a direct-pay offer. Revenue generated will be split up using the publisher's direct-pay share.
  #help_approved_sources_content{ :name => 'Approved sources' } Which sources should this offer be shown from.
  #help_featured_content{ :name => 'Featured' } Enables this offer in our featured offers feed.
  #help_cookie_tracking_content{ :name => 'Cookie Tracking' } Designates that this offer requires cookies to track a conversion.
  #help_rewarded_content{ :name => 'Rewarded' } Whether or not the offer rewards the user with currency.
  #help_name_content{ :name => 'Name' } The name of this offer. This is shown to end-users when displaying the ad.
  #help_internal_suffix_content{ :name => 'Internal Suffix' } Internal identifier for offers. i.e. 'featured' or 'us only'
  #help_account_manager_notes_content{ :name => 'Internal Notes' } Internal notes, only viewable by tapjoyers.
  #help_show_rate_content{ :name => 'Show Rate' } The probability that this offer will be shown on an offerwall impression. This is set automatically by the system and is used for budgeting. Allowed values are 0.0 - 1.0.
  #help_min_conversion_rate_content{ :name => 'Min CVR' } This is used to prevent low conversion rate warnings. A warning will only be issued if the conversion rate falls below this threshold. Allowed values are blank or 0.0 - 1.0
  #help_dma_codes_content{ :name => 'DMA Codes' } Targets this offer to these designated market areas (DMAs). Must be an array of DMA codes or blank for no targeting. i.e. [807,515]
  #help_cities_content{ :name => 'Cities' } Targets this offer to these designated cities. Must be an array of cities or blank for no targeting. i.e. ["New York","San Francisco"]
  #help_regions_content{ :name => 'Regions' } Targets this offer to these designated regions or blank for all regions. Must be an array of state and province codes. i.e. ["CA","OH"]
  #help_device_types_content{ :name => 'Device Types' } Targets this offer to these device types. At least one device type must be selected.
  #help_publisher_app_whitelist_content{ :name => 'Publisher App Whitelist' } Restrict this offer to these publisher apps. Must be a ";" separated list of publisher app IDs.
  #help_daily_budget_content{ :name => 'Daily Conversions' } The maximum number of conversions to complete in one day.
  #help_estimated_budget_content{ :name => 'Daily Budget' } Maximum $ budget for ad conversions in one day.
  #help_overall_budget_content{ :name => 'Overall Conversions' } The maximum number of conversions to complete in the lifetime of this offer. This is merely a hard limit so it is likely that the offer will go over-budget.
  #help_interval_content{ :name => 'Interval' } The interval for frequency capping.
  #help_url_overridden_content{ :name => 'Override Destination URL' } Allows for manual override of Completion URL field
  #help_url_content{ :name => 'Destination URL' } The URL that the user will be redirected to upon clicking an ad (typically links to Market Place / App store search results page)
  #help_impression_tracking_urls_content{ :name => "Tracking Pixel URLs" }<
    %p= h('An "impression" will be recorded at the point when the ad is requested to be displayed.')
    %p With banner ads and featured ads, this is straightforward.
    %p= h('With our offerwall, however, it\'s important to note that an impression is recorded for each offer listed, so actions such as scrolling offers into view, etc, are not taken into account.')
  #help_click_tracking_urls_content{ :name => "Tracking Pixel URLs" }<
    %p= h('The term "click" can mean a variety of things. In this case, it means that the user has clicked on the ad from its initial display point.')
    %p With banner ads and featured ads, this is straightforward.
    %p= h('For our offerwall, this means that the user has clicked on the offer within the offerwall. Depending on the offer, this may result in the user being sent directly to an app download (for PPI offers), or to a secondary page such as a video or a "further instructions" page.')
    %p= h('For CPA offers, to record "click-throughs" to the advertiser\'s site, you should override the Destination URL rather than editing this field.')
    %p For video offers, this field can be used for recording video starts.
  #help_conversion_tracking_urls_content{ :name => "Tracking Pixel URLs" }<
    %p= h('A "conversion" will be recorded when the user has satisfied the conditions necessary to receive a reward.')
    %p For PPI offers, this will happen when the user installs and runs the advertised app.
    %p For CPA offers, this will happen when we are alerted by the advertiser that the offer has been completed.
    %p For video offers, this will happen when the video has finished playing.
  #help_bid_content{ :name => 'Bid' } The bid affects your payment and your offerwall rank.
  #help_min_bid_override_content{ :name => 'Min Bid Override' } Manually set the minimum allowed bid for this offer.
  #help_min_os_version_content{:name => 'Minimum OS Version'} Your offer will only be shown to devices with an OS at this version or higher.
  #help_screen_layout_sizes_content{ :name => 'Screen Layout Sizes' } Targets this offer to these screen sizes. If no specific screen sizes are selected, all screen sizes will be targeted.
  #help_age_rating_content{ :name => 'Age Rating' } Set the minimum viewing age, the recommended ages are 4/9/12/17. If it is viewable to all, just leave the field empty.
  #help_instructions_overridden{ :name => 'Override Default Instructions' } Allows for manual override of Offer Instructions.
  #help_instructions_content{ :name => 'Instructions' }
    Instructions telling users how to complete the action. For example:
    %br
    %br
    1. Open XX App
    %br
    2. Beat Level 1
    %br
    3. You'll receive your currency within a few minutes
    %br
    %br
    Keep your text simple and easy for a user to understand.
  #help_tracking_for_id_content{ :name => 'Tracking For Id' } The Object that is tracked by this offer.
  #help_tracking_for_type_content{ :name => 'Tracking For Type' } The type of the object that is tracked by this offer.
  #help_prerequisite_content{:name => 'Prerequisite Offer'}
    This offer will only be shown to users who have already completed the prerequisite offer.
  #help_exclusion_prerequisites_content{:name => 'Exclusion Prerequisites'}
    This offer will only be shown to users who have NOT completed any of the exclusion prerequisite offers.

- if @offer.app_offer? || @offer.item_type == 'GenericOffer'
  - content_for :page_javascript do
    :plain
      $(function($){
        $('#offer_url_overridden').click(function(){
          if(this.checked) {
            $('#default_url')[0].className = 'hidden';
            $('#url_container')[0].className = '';
          } else {
            $('#url_container')[0].className = 'hidden';
            $('#default_url')[0].className = '';
          }
          return true;
        });
      })
- if @offer.item_type == 'ActionOffer' || @offer.item_type == 'GenericOffer'
  - content_for :page_javascript do
    :plain
      $(function($){
        $('#offer_instructions_overridden').click(function(){
          $('#instructions_container')[0].className = (this.checked ? '' : 'hidden');
          return true;
        });
      })
- content_for :page_javascript do
  :plain
    $(function($){

      var setEstimatedBudget = function() {
        var payment = stringToNumber($('#offer_bid').val());
        var installLimit = stringToNumber($('#offer_daily_budget').val(), true);
        var budget = numberToCurrency(payment * installLimit);
        $('#estimated_budget').val(budget);
      };

      $('#offer_daily_budget').change(function() {
        var installsLimit = Math.floor(stringToNumber($(this).val(), true));
        $('#offer_daily_budget').val(installsLimit);
        setEstimatedBudget();
      });

      $('#estimated_budget').change(function() {
        var budget = stringToNumber($(this).val(), true);
        var currentPayment = stringToNumber($('#offer_bid').val(), true);
        var installLimit = Math.floor(budget / currentPayment);
        $(this).val(numberToCurrency(budget));
        $('#offer_daily_budget').val(installLimit);
        if (!checkValidBudget()) {
          $('#offer_daily_budget').change();
        }
      });

      setEstimatedBudget();

  - %w(impression click conversion).each do |tracking_type|
    :plain
      var set#{tracking_type.capitalize}TrackingPixelURLs = function() {
        var urls = "#{escape_javascript(@offer.send("#{tracking_type}_tracking_urls").join(','))}".split(",");
        var templateSelector = '##{tracking_type}_tracking_url_template';
        var template = $(templateSelector);

        // don't create dups, in case this method gets run twice for some reason
        var existingUrls = $('##{tracking_type}_tracking_urls_row').nextUntil(templateSelector);
        if (existingUrls.length > 0) {
          return;
        }

        for(var i = 0; i < urls.length; i++) {
          if (urls[i] == "") {
            continue;
          }

          var templateClone = template.clone();

          templateClone.find('td input').attr('value', urls[i]);
          templateClone.removeAttr('id');
          templateClone.removeClass('hidden');

          template.before(templateClone);
        }
      }

  :plain

    setImpressionTrackingPixelURLs();
    setClickTrackingPixelURLs();
    setConversionTrackingPixelURLs();

  - %w(impression click conversion).each do |tracking_type|
    :plain
      $('.add_#{tracking_type}_tracking_url').click(function() {
        var template = $('##{tracking_type}_tracking_url_template');
        var templateClone = template.clone(true);

        templateClone.removeAttr('id');
        templateClone.removeClass('hidden');

        template.before(templateClone);
      });

      $('.remove_#{tracking_type}_tracking_url').click(function() {
        var url = $(this).parent().parent();
        url.addClass('hidden');
        url.find('td input').attr('name', '');
      });

  :plain

    })

- content_for :page_styles do
  :plain
    .icon {
      float: left;
      padding: 20px 0;
    }
    .details {
      font-size: 12px;
    }
    .creative_upload {
      width: 100%;
      border: none;
      height: 35px;
    }
