- @page_title = "Stats for offer: #{@offer.name_with_suffix}"

.icon= image_tag(@offer.get_icon_url, :size => '57x57')
%h1= @offer.name_with_suffix
.associated
  %a#show_associated{:href => '#'} [#{@associated_offers.size} associated offers]
  = link_to('[Create secondary offer]', new_statz_path(:id => @offer.id))
#associated_list
  %h5 Associated offers:
  %ul
    - @associated_offers.each do |offer|
      %li= link_to(offer.name_with_suffix, statz_path(offer.id))

#display_date
  For: #{@start_time.to_s(:pub_ampm_sec)} UTC - #{@end_time.to_s(:pub_ampm_sec)} UTC. 
  Granularity: #{@granularity.to_s}.
  %a{:href => 'javascript:$.noop();'} [Change]
%form#change_date{:method => 'get'}
  %input.start{:name => 'date', :value => "#{@start_time.strftime('%m/%d/%Y')}" }
  \-
  %input.end{:name => 'end_date', :value => "#{@end_time.strftime('%m/%d/%Y')}"}
  
  = select_tag('granularity', options_for_select({ 'Daily' => :daily, 'Hourly' => :hourly }, @granularity))
  
  %input{:type => 'submit', :value => 'Change' }

  

- if permitted_to? :edit, :statz
  %p= link_to('[Edit Offer]', edit_statz_path(@offer.id))
- if permitted_to? :last_run_times, :statz
  %p= link_to('[View Last Run Times]', last_run_times_statz_path(@offer.id))
- if permitted_to? :udids, :statz
  %p= link_to('[View Monthly UDID Reports]', udids_statz_path(@offer.id))
- if @offer.item_type == 'App' && @offer.item.currency
  #currency
    Currency: #{@offer.item.currency.name}
    %a.more{ :href => '#' } [Show more details]
    = link_to('[View Offer Wall]', "/get_offers/webpage?app_id=#{@offer.id}&udid=#{Offer::EXEMPT_UDID}&publisher_user_id=testuser&device_type=#{@offer.item.platform}")
    .details
      .metadata Conversion rate: #{@offer.item.currency.conversion_rate}
      .metadata Callback url: #{@offer.item.currency.callback_url}
      .metadata Secret key: #{@offer.item.currency.secret_key}
      .metadata Initial balance: #{@offer.item.currency.initial_balance}
      .metadata Only free offers: #{@offer.item.currency.only_free_offers?}
      .metadata Has virtual goods: #{@offer.item.currency.has_virtual_goods?}
      .metadata Send offer data: #{@offer.item.currency.send_offer_data?}
      .metadata Offers money share: #{@offer.item.currency.offers_money_share}
      .metadata Installs money share: #{@offer.item.currency.installs_money_share}
      .metadata Max age rating: #{@offer.item.currency.max_age_rating}
      .metadata Disabled offers: #{@offer.item.currency.disabled_offers}
      .metadata Disabled partners: #{@offer.item.currency.disabled_partners}
      .metadata Test devices: #{@offer.item.currency.test_devices}

.left
  .metadata
    Offer id:
    = @offer.id + ' - '
    - if permitted_to? :index, :activities
      = link_to('[Activity Log]', activities_path(:object_id => @offer.id)) + ' - '
    = clippy(@offer.id)
  .metadata
    Partner id:
    = link_to(@offer.partner_id, partner_path(@offer.partner_id)) + ' - '
    - if permitted_to? :index, :activities
      = link_to('[Activity Log]', activities_path(:partner_id => @offer.partner_id)) + ' - '
    = clippy(@offer.partner_id)
  .metadata Contact: #{@offer.partner.users.first.email if @offer.partner.users.first}
  .metadata Offer type: #{@offer.item_type}
  - if @offer.item_type == 'App'
    .metadata Store id: #{@offer.item.store_id.blank? ? 'None' : link_to(@offer.item.store_id, @offer.item.final_store_url)}
    .metadata
      Use raw url: #{@offer.item.use_raw_url?}
      - if @offer.item.use_raw_url?
        = link_to('[url]', @offer.item.store_url)
  .metadata Price: #{number_to_currency(@offer.price / 100.0)}
  .metadata Balance: #{number_to_currency(@offer.partner.balance / 100.0)}
  .metadata Pending Earnings: #{number_to_currency(@offer.partner.pending_earnings / 100.0)}
  .metadata Daily budget: #{@offer.daily_budget}
  .metadata Show rate: #{"%.1f%" % ((@offer.show_rate || 0) * 100.0)}
  .metadata Ordinal: #{@offer.ordinal}
  .metadata Payment: #{number_to_currency(@offer.payment / 100.0)}
  .metadata Tapjoy enabled: #{@offer.tapjoy_enabled}

.right
  .metadata Countries: #{@offer.countries}
  .metadata Cities: #{@offer.cities}
  .metadata Postal codes: #{@offer.postal_codes}
  .metadata Pay-per-click: #{@offer.pay_per_click?}
  .metadata Device types: #{@offer.device_types}
  .metadata Allow negative balance: #{@offer.allow_negative_balance?}
  .metadata Self promote only: #{@offer.self_promote_only?}
  .metadata Featured: #{@offer.featured?}
.clear

- unless @offer.publisher_app_whitelist.blank?
  %h5 Publisher app whitelist (this offer will only be shown from the following apps):
  %ul
    - @offer.get_publisher_app_whitelist.each do |publisher_app_id|
      - app = App.find(publisher_app_id)
      %li= link_to(app.name, statz_path(app.id))

#connects.graph
  %h3
  .totals
  .holder
    %canvas#connects_graph{:width => '550px', :height => '330px'}
    .bar
    .tooltip

#installs_spend.graph
  %h3
  .totals
  .holder
    %canvas#installs_spend_graph{:width => '550px', :height => '330px'}
    .bar
    .tooltip

#installs_rank.graph
  %h3
  .totals
  .holder
    %canvas#installs_rank_graph{:width => '550px', :height => '330px'}
    .bar
    .tooltip

#published_installs.graph
  %h3
  .totals
  .holder
    %canvas#published_installs_graph{:width => '550px', :height => '330px'}
    .bar
    .tooltip

#offerwall_views.graph
  %h3
  .totals
  .holder
    %canvas#offerwall_views_graph{:width => '550px', :height => '330px'}
    .bar
    .tooltip

#published_offers.graph
  %h3
  .totals
  .holder
    %canvas#published_offers_graph{:width => '550px', :height => '330px'}
    .bar
    .tooltip

#ratings.graph
  %h3
  .totals
  .holder
    %canvas#ratings_graph{:width => '550px', :height => '330px'}
    .bar
    .tooltip


#virtual_goods.graph
  %h3
  .totals
  .holder
    %canvas#virtual_goods_graph{:width => '550px', :height => '330px'}
    .bar
    .tooltip

#ads.graph
  %h3
  .totals
  .holder
    %canvas#ads_graph{:width => '550px', :height => '330px'}
    .bar
    .tooltip

- include_tapjoy_graph

- content_for :page_javascript do
  :plain
    var installData = {
      "name": "Rewarded installs + spend",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data":[
           [ #{@stats['paid_installs'].join(',')} ],
           [ #{@stats['paid_clicks'].join(',')} ]
        ],
        "names": ["Paid installs", "Paid clicks"],
        "totals": [ #{@stats['paid_installs'].sum}, #{@stats['paid_clicks'].sum} ]
      },
      
      "right": {
        "data": [
          [ #{@stats['installs_spend'].map{|i| i / -100.0}.join(',')} ]
        ],
        "stringData": [
          [ "#{@stats['installs_spend'].map{|i| number_to_currency(i / -100.0)}.join('","')}" ]
        ],
        "names": [ "Spend" ],
        "unitPrefix": "$",
        "totals": [ "#{number_to_currency(@stats['installs_spend'].sum / 100.0)}" ]
      },
      
      "extra": {
        "data": [
          [ "#{@stats['cvr'].map { |cvr| "%.0f%" % (cvr.to_f * 100.0) }.join('","')}" ]
        ],
        "names": [ "Conversion rate" ],
        "totals": [ "#{"%.1f%" % (@stats['paid_installs'].sum.to_f / @stats['paid_clicks'].sum * 100.0)}" ]
      }
    };
    
    var connectData = {
      "name": "Connects",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data":[
           [ #{@stats['logins'].join(',')} ],
           [ #{@stats['new_users'].join(',')} ],
           [ #{@stats['daily_active_users'].join(',')} ],
           [ #{@stats['monthly_active_users'].join(',')} ],
        ],
        "names": ["Connects", "New users", "DAUs", "MAUs"],
        "totals": [ #{@stats['logins'].sum}, #{@stats['new_users'].sum}, #{@stats['daily_active_users'].sum}, #{@stats['monthly_active_users'].sum} ]
      }
    };
    
    var rankData = {
      "name": "Rewarded installs + rank",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data":[
           [ #{@stats['paid_installs'].join(',')} ],
           [ #{@stats['paid_clicks'].join(',')} ]
        ],
        "names": ["Paid installs", "Paid clicks"],
        "totals": [ #{@stats['paid_installs'].sum}, #{@stats['paid_clicks'].sum} ]
      },
      
      "right": {
        "data": [
          [ #{ @stats['overall_store_rank'].map{|r| r == '-' || r == '0'  ? 'null' : r}.join(',') } ]
        ],
        "names": [ "Rank" ],
        "totals": [ "#{ (@stats['overall_store_rank'].select{|r| r != '0'}.last || '-') }" ],
        "yMax": 100
      }
    };
    
    var publishedInstallsData = {
      "name": "Published installs",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data":[
           [ #{@stats['published_installs'].join(',')} ],
           [ #{@stats['installs_opened'].join(',')} ]
        ],
        "names": ["Published installs", "Published clicks"],
        "totals": [ #{@stats['published_installs'].sum}, #{@stats['installs_opened'].sum} ]
      },
      
      "right": {
        "data": [
          [ #{@stats['installs_revenue'].map{|i| i / 100.0}.join(',')} ]
        ],
        "stringData": [
          [ "#{@stats['installs_revenue'].map{|i| number_to_currency(i / 100.0)}.join('","')}" ]
        ],
        "names": [ "Installs revenue" ],
        "unitPrefix": "$",
        "totals": [ "#{ number_to_currency(@stats['installs_revenue'].sum / 100.0) }" ]
      },
    };
    
    var offerwallData = {
      "name": "Offerwall views",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data":[
           [ #{@stats['published_installs'].join(',')} ],
           [ #{@stats['installs_opened'].join(',')} ],
           [ #{@stats['offerwall_views'].join(',')} ]
        ],
        "names": ["Published installs", "Published clicks", "Offerwall views"],
        "totals": [ #{@stats['published_installs'].sum}, #{@stats['installs_opened'].sum}, #{@stats['offerwall_views'].sum} ]
      }
    };
    
    var publishedOffersData = {
      "name": "Published offers",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data":[
           [ #{@stats['offers'].join(',')} ],
           [ #{@stats['offers_opened'].join(',')} ]
        ],
        "names": ["Offers completed", "Offers clicked"],
        "totals": [ #{@stats['offers'].sum}, #{@stats['offers_opened'].sum} ]
      },
      
      "right": {
        "data": [
          [ #{@stats['offers_revenue'].map{|i| i / 100.0}.join(',')} ]
        ],
        "stringData": [
          [ "#{@stats['offers_revenue'].map{|i| number_to_currency(i / 100.0)}.join('","')}" ]
        ],
        "names": [ "Offers revenue" ],
        "unitPrefix": "$",
        "totals": [ "#{ number_to_currency(@stats['offers_revenue'].sum / 100.0) }" ]
      },
    };
    
    var ratingsData = {
      "name": "Ratings",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data":[
           [ #{@stats['ratings'].join(',')} ]
        ],
        "names": [ "Ratings" ],
        "totals": [ #{@stats['ratings'].sum} ]
      }
    };
    
    var virtualGoodsData = {
      "name": "Virtual goods",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data":[
           [ #{@stats['vg_purchases'].join(',')} ]
        ],
        "names": [ "Virtual good purchases" ],
        "totals": [ #{@stats['vg_purchases'].sum} ]
      }
    };
    
    var adsData = {
      "name": "Ad impressions",
      "intervals": [ "#{@intervals.join('","')}" ],
      "xLabels": [ "#{@x_labels.join('","')}" ],
      
      "main": {
        "data":[
           [ #{@stats['hourly_impressions'].join(',')} ]
        ],
        "names": [ "Ad impressions" ],
        "totals": [ #{@stats['hourly_impressions'].sum} ]
      }
    };
    
    $(function() {
      Tapjoy.drawLargeGraph(connectData, 'connects');
      Tapjoy.drawLargeGraph(installData, 'installs_spend');
      Tapjoy.drawLargeGraph(rankData, 'installs_rank');
      Tapjoy.drawLargeGraph(publishedInstallsData, 'published_installs');
      Tapjoy.drawLargeGraph(offerwallData, 'offerwall_views');
      Tapjoy.drawLargeGraph(publishedOffersData, 'published_offers');
      Tapjoy.drawLargeGraph(ratingsData, 'ratings');
      Tapjoy.drawLargeGraph(virtualGoodsData, 'virtual_goods');
      Tapjoy.drawLargeGraph(adsData, 'ads');
      
      $('#change_date .start').datepicker();
      $('#change_date .end').datepicker();
      
      $('#display_date a').click(function() {
        $('#display_date').hide();
        $('#change_date').show();
      });
      
      $('#currency .more').click(function() {
        $('#currency .details').toggle();
        return false;
      });
      
      $('#show_associated').click(function() {
        $('#associated_list').toggle();
        return false;
      });
    });
    
- content_for :page_styles do
  :plain
    .icon {
      float: left;
    }
    
    td.breakdown {
      overflow: hidden;
      font-size: small;
    }
    
    td.breakdown canvas {
      margin: -40px 0;
    }
    
    table {
      clear: both;
    }
    
    h1 {
      display: inline-block;
      margin-top: 0;
    }
    
    .associated {
      display: inline-block;
      padding-left: 10px;
    }
    
    .left {
      float: left;
    }
    .right {
      float: right;
    }
    
    #associated_list,
    #change_date {
      display: none;
    }
    
    #associated_list h5 {
      margin-top: 0;
    }
    
    #currency {
      margin-bottom: 16px;
    }
    
    #currency .details {
      display: none;
      margin-left: 10px;
    }
